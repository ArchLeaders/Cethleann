using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using Cethleann.Ninja;
using Cethleann.Structure;
using JetBrains.Annotations;

namespace Cethleann.ManagedFS
{
    /// <summary>
    ///     Manages TN files
    /// </summary>
    [PublicAPI]
    public class Yshtola : IEnumerable<IDTableEntry>
    {
        /// <summary>
        ///     Initialize with standard data.
        /// </summary>
        /// <param name="root"></param>
        /// <param name="settings"></param>
        public Yshtola(string root, YshtolaSettings settings)
        {
            Settings = settings;
            if (File.Exists(Path.Combine(root, Settings.TableName)))
                Root = Path.GetFullPath(Path.Combine(root, ".."));
            else if (File.Exists(Path.Combine(root, Settings.Directory, Settings.TableName))) Root = Path.GetFullPath(Path.Combine(root));

            Table = new IDTable(File.ReadAllBytes(Path.Combine(root, Settings.Directory, settings.TableName)), IDTableFlags.Compressed | IDTableFlags.Encrypted, Settings.XorTruth, Settings.Multiplier, Settings.Divisor);
        }

        /// <summary>
        ///     Settings to use for decryption and loading.
        /// </summary>
        public YshtolaSettings Settings { get; }

        /// <summary>
        ///     ID Table
        /// </summary>
        public IDTable Table { get; set; }

        /// <summary>
        ///     Root directory, the one that contains COMMON.
        /// </summary>
        public string Root { get; set; }

        /// <inheritdoc />
        public IEnumerator<IDTableEntry> GetEnumerator()
        {
            return ((IEnumerable<IDTableEntry>) Table.Entries).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        /// <summary>
        ///     Reads a file from an ID Table entry.
        /// </summary>
        /// <param name="entry"></param>
        /// <returns></returns>
        /// <exception cref="FileNotFoundException"></exception>
        public (Memory<byte> Data, string Path) ReadEntry(IDTableEntry entry)
        {
            var path = Path.Combine(Root, entry.Path(Table.Table, Table.Header.Offset));
            if (!File.Exists(path)) throw new FileNotFoundException(path);

            return (new Memory<byte>(Table.Read(File.ReadAllBytes(path), entry, Settings.XorTruth, Settings.Multiplier, Settings.Divisor).ToArray()), entry.OriginalPath(Table.Table, Table.Header.Offset));
        }
    }

    /// <summary>
    ///     Abstract base settings
    /// </summary>
    [PublicAPI]
    public abstract class YshtolaSettings
    {
        /// <summary>
        ///     Directory the files and ID table reside in
        /// </summary>
        public string Directory { get; set; }

        /// <summary>
        ///     ID Table name
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        ///     Key truth
        /// </summary>
        public byte[] XorTruth { get; set; }

        /// <summary>
        ///     Key multiplier constant
        /// </summary>
        public ulong Multiplier { get; set; }

        /// <summary>
        ///     Key divisor constant
        /// </summary>
        public ulong Divisor { get; set; }
    }

    /// <summary>
    ///     Settings specific to NT
    /// </summary>
    [PublicAPI]
    public class DissidiaSettings : YshtolaSettings
    {
        /// <summary>
        ///     Initialize with default values
        /// </summary>
        public DissidiaSettings()
        {
            Directory = "COMMON";
            TableName = "dafb4dd62a79856ae4a02584d9f642a10208bcc3d3de61210a73a75bfb218bc0";
            Multiplier = 0x69UL;
            Divisor = 0xBUL;
            XorTruth = new byte[]
            {
                0x61, 0x68, 0x63, 0x54, 0x61, 0x4E, 0x77, 0x4C, 0x63, 0x41, 0x54, 0x52, 0x45, 0x70, 0x78, 0x74,
                0x5A, 0x45, 0x58, 0x4D, 0x38, 0x6E, 0x32, 0x75, 0x75, 0x4F, 0x6E, 0x34, 0x34, 0x52, 0x33, 0x51,
                0x6A, 0x76, 0x43, 0x71, 0x58, 0x4B, 0x59, 0x66, 0x72, 0x68, 0x61, 0x65, 0x65, 0x36, 0x73, 0x76,
                0x62, 0x50, 0x76, 0x66, 0x68, 0x78, 0x6A, 0x71, 0x43, 0x42, 0x74, 0x32, 0x5A, 0x51, 0x38, 0x6E,
                0x58, 0x36, 0x54, 0x78, 0x53, 0x74, 0x34, 0x6C, 0x39, 0x49, 0x4D, 0x70, 0x4F, 0x6A, 0x31, 0x6C,
                0x41, 0x65, 0x41, 0x54, 0x6A, 0x70, 0x44, 0x74, 0x63, 0x47, 0x50, 0x51, 0x44, 0x6E, 0x71, 0x6E,
                0x32, 0x77, 0x5A, 0x52, 0x4A, 0x36, 0x71, 0x6B, 0x77, 0x57, 0x6F, 0x56, 0x79, 0x32, 0x6B, 0x6B,
                0x38, 0x49, 0x78, 0x4D, 0x37, 0x38, 0x36, 0x31, 0x4E, 0x51, 0x36, 0x7A, 0x65, 0x4D, 0x41, 0x37,
                0x7A, 0x4F, 0x72, 0x64, 0x78, 0x75, 0x6E, 0x41, 0x30, 0x37, 0x42, 0x73, 0x68, 0x43, 0x54, 0x32,
                0x72, 0x42, 0x37, 0x57, 0x79, 0x54, 0x55, 0x36, 0x44, 0x37, 0x51, 0x75, 0x33, 0x66, 0x7A, 0x63,
                0x69, 0x46, 0x61, 0x68, 0x6E, 0x65, 0x6D, 0x59, 0x76, 0x48, 0x63, 0x6C, 0x6F, 0x55, 0x5A, 0x44,
                0x65, 0x38, 0x6F, 0x45, 0x7A, 0x77, 0x49, 0x69, 0x50, 0x7A, 0x72, 0x50, 0x72, 0x71, 0x57, 0x4A,
                0x43, 0x44, 0x56, 0x44, 0x6E, 0x76, 0x31, 0x33, 0x51, 0x43, 0x49, 0x30, 0x69, 0x65, 0x71, 0x72,
                0x44, 0x75, 0x55, 0x55, 0x36, 0x35, 0x43, 0x35, 0x6F, 0x37, 0x52, 0x63, 0x42, 0x58, 0x6F, 0x4C,
                0x35, 0x79, 0x75, 0x67, 0x4F, 0x73, 0x41, 0x59, 0x42, 0x6C, 0x67, 0x70, 0x4C, 0x6F, 0x68, 0x4F,
                0x77, 0x30, 0x6E, 0x75, 0x63, 0x30, 0x6D, 0x6C, 0x74, 0x38, 0x36, 0x63, 0x32, 0x54, 0x71, 0x51,
                0x36, 0x46, 0x34, 0x34, 0x6D, 0x47, 0x65, 0x4C, 0x7A, 0x55, 0x6A, 0x43, 0x73, 0x69, 0x68, 0x41,
                0x41, 0x4E, 0x6A, 0x6B, 0x58, 0x37, 0x31, 0x55, 0x36, 0x7A, 0x6D, 0x69, 0x61, 0x53, 0x6A, 0x54,
                0x75, 0x47, 0x4D, 0x34, 0x46, 0x58, 0x69, 0x4B, 0x67, 0x31, 0x69, 0x4F, 0x72, 0x64, 0x68, 0x39,
                0x77, 0x62, 0x71, 0x36, 0x59, 0x63, 0x34, 0x54, 0x31, 0x48, 0x6A, 0x56, 0x31, 0x6A, 0x56, 0x32,
                0x67, 0x72, 0x6C, 0x38, 0x32, 0x61, 0x78, 0x41, 0x71, 0x45, 0x55, 0x4E, 0x67, 0x58, 0x51, 0x4C,
                0x4F, 0x63, 0x51, 0x76, 0x4A, 0x51, 0x7A, 0x71, 0x4C, 0x7A, 0x49, 0x64, 0x55, 0x67, 0x46, 0x48,
                0x37, 0x6F, 0x79, 0x30, 0x31, 0x45, 0x43, 0x33, 0x62, 0x5A, 0x36, 0x33, 0x52, 0x33, 0x51, 0x31,
                0x4A, 0x71, 0x72, 0x79, 0x77, 0x54, 0x51, 0x55, 0x6D, 0x49, 0x7A, 0x56, 0x33, 0x6D, 0x33, 0x42
            };
        }
    }
}
